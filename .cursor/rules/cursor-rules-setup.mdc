---
alwaysApply: false
---

# Cursor Rules Setup Guide for Repetito

## Overview

This document provides the complete setup guide for implementing the "Repetito Rules 2.0" system - an optimized approach for managing AI context, rules, and memory in the Repetito Czech educational app development.

## üéØ **Final User Rules (Global Settings)**

Based on cursor.directory best practices and community research, here are the optimal **User Rules** for Cursor Settings ‚Üí Rules for AI:

```markdown
Always respond in Czech (language)

You are an expert in TypeScript, React Native, Expo (Managed Workflow), NativeWind, Gluestack UI, Supabase, Zod, Zustand, TanStack React Query, and mobile-first UI/UX.

**Do NOT generate or suggest anything web-related** ‚Äî this is a mobile-only app deployed via EAS Build (iOS & Android). Ignore Next.js, Solito, web breakpoints, and web-specific solutions.

## Personal Development Assistant Preferences

**Communication Style:**
- Explain concepts in beginner-friendly terms with clear examples
- Break down complex topics into digestible steps
- Provide "why" behind decisions, not just "how"
- Show before/after code examples when making improvements
- Don't give high-level generic advice - provide actual code

**Code Style and Structure:**
- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Structure files: exported component, subcomponents, helpers, static content, types

**TypeScript Usage:**
- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use maps instead
- Use functional components with TypeScript interfaces
- Use strict mode in TypeScript for better type safety
- Avoid 'any' type; strive for precise types

**Mobile Development Focus:**
- Follow Expo's official documentation patterns: https://docs.expo.dev/
- Prioritize mobile-native solutions over web adaptations
- Consider performance implications for mobile devices
- Use Expo's managed workflow for streamlined development
- Implement proper error handling with early returns and guard clauses

**Output Behavior:**
- Be casual but technical
- Anticipate my needs and suggest solutions I didn't think about
- Assume I'm learning and need context for decisions
- Warn about common pitfalls and mistakes
- When multiple approaches exist, explain trade-offs
```

## üìÇ **Project Rules Structure (Current Status)**

Our `.cursor/rules/` directory currently contains:

### ‚úÖ **Existing Rules (Updated & Ready)**
- **[cursor-rules.mdc](mdc:.cursor/rules/cursor-rules.mdc)** - Repetito-specific rule management guide
- **[project-structure.mdc](mdc:.cursor/rules/project-structure.mdc)** - Complete project architecture and file structure
- **[self-improve.mdc](mdc:.cursor/rules/self-improve.mdc)** - Educational app improvement patterns
- **[tech-stack.mdc](mdc:.cursor/rules/tech-stack.mdc)** - NativeWind + Gluestack UI decisions

### üîÑ **Missing Rules (To Be Created)**

#### 1. **Main Entry Point Rule**
Create `repetito-knowledge-base.mdc` with `alwaysApply: true`:
- Central knowledge base for Repetito project
- Instructions for AI on when to fetch other rules
- Auto-selection logic for different scenarios

#### 2. **Czech Educational Rules**
Create `czech-educational-context.mdc`:
- Maturita preparation specifics
- Czech language patterns and cultural context
- Educational UX best practices
- Student behavior insights

#### 3. **Development Workflow Rules**
Create `repetito-development.mdc`:
- EAS Build procedures with pre-build checklist
- RevenueCat integration patterns
- Analytics and error tracking workflows
- Testing and deployment guidelines

#### 4. **Spaced Repetition Rules**
Create `spaced-repetition-algorithms.mdc`:
- Educational algorithm implementations
- Study session patterns
- Progress tracking methodologies
- Memory retention optimization

## üß† **Memory Integration Strategy**

### **Current Memories to Preserve**
- EAS Build pre-build checklist [[memory:1583425]]
- RevenueCat development error fixes [[memory:1769935]]
- iOS Development Build troubleshooting [[memory:116557]]
- Development server management [[memory:116550]]

### **Memory ‚Üí Rules Migration Plan**
1. **Convert critical memories to rules** when they become patterns used 3+ times
2. **Keep situational memories** for specific troubleshooting scenarios
3. **Cross-reference** between rules and related memories

## üîß **Implementation Checklist**

### **Phase 1: User Rules Setup** ‚úÖ
- [x] Research cursor.directory best practices
- [x] Analyze community feedback and patterns
- [x] Create optimal User Rules template
- [ ] **USER ACTION**: Copy User Rules to Cursor Settings ‚Üí Rules for AI

### **Phase 2: Project Rules Completion** üîÑ
- [x] Update existing 4 rules with Repetito specifics
- [ ] Create `repetito-knowledge-base.mdc` (main entry point)
- [ ] Create `czech-educational-context.mdc`
- [ ] Create `repetito-development.mdc`
- [ ] Create `spaced-repetition-algorithms.mdc`

### **Phase 3: Integration & Testing** ‚è≥
- [ ] Test auto-rule selection with `@rule-name` references
- [ ] Verify memory system integration
- [ ] Optimize rule descriptions for AI agent selection
- [ ] Performance test with different rule combinations

### **Phase 4: Workflow Optimization** ‚è≥
- [ ] Create rule usage guidelines for development team
- [ ] Establish rule maintenance procedures
- [ ] Document rule update triggers and processes
- [ ] Integrate with CI/CD workflow

## üéØ **Rule Usage Patterns**

### **For Daily Development**
- Auto-applied: `repetito-knowledge-base.mdc`, `tech-stack.mdc`
- On-demand: `@project-structure` when navigating codebase
- Manual: `@spaced-repetition-algorithms` when working on educational features

### **For Specific Tasks**
- UI work: `@tech-stack` + `@magical-green-ui`
- New features: `@repetito-development` + `@czech-educational-context`
- Debugging: `@project-structure` + relevant memories
- Refactoring: `@self-improve` + `@tech-stack`

## üîç **Quality Assurance**

### **Rule Validation Checklist**
- [ ] Each rule has clear, actionable content
- [ ] Examples come from actual Repetito codebase
- [ ] No conflicts between different rules
- [ ] Proper frontmatter configuration
- [ ] Links to relevant files use `mdc:` format

### **Performance Monitoring**
- [ ] Monitor rule loading times in AI context
- [ ] Track rule selection accuracy by AI agent
- [ ] Measure development velocity improvements
- [ ] Collect feedback on rule usefulness

## üìã **Next Steps**

1. **Immediate**: Implement User Rules in Cursor Settings
2. **Today**: Create remaining Project Rules
3. **This Week**: Test and optimize rule system
4. **Ongoing**: Maintain and evolve rules based on development patterns

## üîó **Cross-References**

- Main project structure: [project-structure.mdc](mdc:.cursor/rules/project-structure.mdc)
- Technology decisions: [tech-stack.mdc](mdc:.cursor/rules/tech-stack.mdc)
- Improvement patterns: [self-improve.mdc](mdc:.cursor/rules/self-improve.mdc)
- Rule management: [cursor-rules.mdc](mdc:.cursor/rules/cursor-rules.mdc)

---

*This document serves as the central coordination point for the Repetito Rules 2.0 implementation. Update as the system evolves.*
description:
globs:
alwaysApply: false
---
