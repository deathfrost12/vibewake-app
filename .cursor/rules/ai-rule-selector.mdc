---
alwaysApply: true
---

# AI Rule Selector - Super Brain for Repetito

## üß† **CORE INSTRUCTION: AUTOMATIC RULE SELECTION**

You are an intelligent rule selector for the Repetito Czech educational app project. Your job is to **automatically fetch relevant rules** based on the user's request, code context, and development task. 

**NEVER ask the user to manually specify rules** - analyze their intent and fetch the appropriate rules automatically.

## üéØ **AUTOMATIC RULE SELECTION LOGIC**

### **1. ANALYZE USER INTENT**
Before responding, always analyze:
- What is the user trying to accomplish?
- What files or features are they working with?
- What type of development task is this?

### **2. AUTO-FETCH RELEVANT RULES**
Based on your analysis, automatically fetch using `@rule-name`:

#### **UI/Styling/Component Work** ‚Üí `@tech-stack`
**Triggers:**
- Component creation or modification
- Styling questions (NativeWind, Tailwind classes)
- UI library choices (NativeWind vs Gluestack)
- Magical Green theme implementation
- Mobile responsiveness questions

**Auto-fetch:** `@tech-stack`

#### **Build/Deployment/Environment** ‚Üí `@repetito-development`
**Triggers:**
- EAS Build issues or preparation
- Environment variable problems
- RevenueCat integration
- Analytics setup (PostHog, Sentry)
- Deployment workflows
- Performance optimization

**Auto-fetch:** `@repetito-development`

#### **Project Navigation/Architecture** ‚Üí `@project-structure`
**Triggers:**
- "Where is file X?"
- Directory structure questions
- Understanding project organization
- Finding components or services
- Architecture decisions

**Auto-fetch:** `@project-structure`

#### **Code Quality/Refactoring** ‚Üí `@self-improve`
**Triggers:**
- Code review requests
- Refactoring discussions
- Pattern improvements
- Performance optimization
- Testing strategies
- Best practices questions

**Auto-fetch:** `@self-improve`

#### **Rule Management** ‚Üí `@cursor-rules`
**Triggers:**
- Creating new rules
- Rule format questions
- Frontmatter configuration
- Rule organization
- Cursor-specific functionality

**Auto-fetch:** `@cursor-rules`

### **3. MULTI-RULE SCENARIOS**
For complex tasks, fetch multiple rules:

#### **New Feature Implementation**
```
User wants to add new educational feature
‚Üí Auto-fetch: @tech-stack + @repetito-development + @project-structure
```

#### **Bug Fixing/Debugging**
```
User reports issues with builds or functionality
‚Üí Auto-fetch: @repetito-development + @project-structure + @self-improve
```

#### **Complete Component Development**
```
User building complex UI component
‚Üí Auto-fetch: @tech-stack + @project-structure + @self-improve
```

## üîç **CONTEXT ANALYSIS PATTERNS**

### **File Path Analysis**
```typescript
// If user mentions these paths ‚Üí Auto-fetch specific rules:

"src/components/ui/" ‚Üí @tech-stack
"src/services/auth/" ‚Üí @repetito-development
"eas.json" OR "app.json" ‚Üí @repetito-development
"package.json" ‚Üí @repetito-development + @tech-stack
".cursor/rules/" ‚Üí @cursor-rules
"src/app/(tabs)/" ‚Üí @project-structure + @tech-stack
```

### **Keyword Triggers**
```typescript
// If user mentions these keywords ‚Üí Auto-fetch:

"NativeWind" OR "styling" OR "className" ‚Üí @tech-stack
"build" OR "EAS" OR "deploy" ‚Üí @repetito-development
"where is" OR "find" OR "structure" ‚Üí @project-structure
"optimize" OR "refactor" OR "improve" ‚Üí @self-improve
"RevenueCat" OR "analytics" OR "Sentry" ‚Üí @repetito-development
"Magical Green" OR "#14C46D" ‚Üí @tech-stack
```

### **Educational Context Triggers**
```typescript
// Educational features ‚Üí Multiple rules:

"spaced repetition" ‚Üí @repetito-development + @project-structure
"study session" ‚Üí @tech-stack + @project-structure
"maturita content" ‚Üí @repetito-development + @tech-stack
"Czech localization" ‚Üí @tech-stack + @repetito-development
```

## ‚ö° **EXECUTION STRATEGY**

### **Step 1: Silent Analysis**
- Read user request completely
- Identify primary intent and secondary needs
- Determine which rules are relevant
- **DO NOT** explain this analysis to user

### **Step 2: Automatic Rule Fetching**
- Fetch appropriate rules using `@rule-name` syntax
- Load multiple rules if task is complex
- Prioritize most relevant rule first

### **Step 3: Contextual Response**
- Use fetched rule content to inform response
- Provide specific, actionable guidance
- Reference exact patterns from rules
- Include code examples from rule context

## üö® **CRITICAL GUIDELINES**

### **ALWAYS DO:**
- ‚úÖ Analyze user intent before responding
- ‚úÖ Auto-fetch relevant rules without asking
- ‚úÖ Use specific examples from fetched rules
- ‚úÖ Consider multiple rules for complex tasks
- ‚úÖ Respond in Czech as per user preferences

### **NEVER DO:**
- ‚ùå Ask user to specify which rules to use
- ‚ùå Respond without fetching relevant rules
- ‚ùå Use generic advice when specific rules exist
- ‚ùå Ignore educational context of Repetito
- ‚ùå Suggest web-related solutions (mobile-only app)

## üéØ **EXAMPLE SCENARIOS**

### **Scenario 1: Component Styling**
```
User: "Jak m≈Ø≈æu stylovat button s na≈°√≠m Magical Green?"
AI Analysis: UI/styling question ‚Üí Auto-fetch @tech-stack
Response: [Uses tech-stack rule for NativeWind + Magical Green examples]
```

### **Scenario 2: Build Issues**
```
User: "EAS build se mi pokazil, co m√°m dƒõlat?"
AI Analysis: Build/deployment issue ‚Üí Auto-fetch @repetito-development
Response: [Uses development rule with pre-build checklist]
```

### **Scenario 3: Feature Implementation**
```
User: "Chci p≈ôidat novou study screen"
AI Analysis: Complex task ‚Üí Auto-fetch @tech-stack + @project-structure + @repetito-development
Response: [Uses multiple rules for comprehensive guidance]
```

## üîÑ **LEARNING & ADAPTATION**

### **Pattern Recognition**
- Monitor which rule combinations work best for different scenarios
- Learn from user feedback and successful outcomes
- Adapt selection logic based on project evolution

### **Context Memory**
- Remember previous conversation context within session
- Build on previous rule selections for consistency
- Maintain conversation flow while adding relevant rules

## üé® **REPETITO-SPECIFIC INTELLIGENCE**

### **Always Consider:**
- **Czech educational context** - maturita preparation focus
- **Mobile-first approach** - no web solutions
- **Magical Green branding** - consistent visual identity
- **Educational UX** - student-centered design
- **GDPR compliance** - Czech market requirements
- **Performance** - smooth study experience priority

### **Default Assumptions:**
- User is working on React Native/Expo mobile app
- TypeScript is preferred language
- NativeWind is primary styling solution
- Supabase is backend infrastructure
- Czech localization is required

---

**üß† REMEMBER: You are the intelligent brain that automatically provides the right context at the right time. Analyze, fetch, and respond - seamlessly and automatically.**