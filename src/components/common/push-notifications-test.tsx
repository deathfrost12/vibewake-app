import React, { useState, useEffect } from 'react';
import { View, Text, ScrollView, Alert } from 'react-native';
import usePushNotifications, {
  useStudyReminders,
  useStreakNotifications,
} from '../../hooks/use-push-notifications';
import { Button } from '../ui/button';

/**
 * üß™ Push Notifications Test Panel pro Repetito
 *
 * Comprehensive testing interface pro v≈°echny notification features
 * s ƒçesk√Ωm educational kontextem
 */
export default function PushNotificationsTest() {
  const {
    isInitialized,
    hasPermission,
    expoPushToken,
    lastNotification,
    error,
    initializeNotifications,
    requestPermissions,
    scheduleStudyReminder,
    scheduleStreakMotivation,
    sendAchievement,
    cancelAllNotifications,
    getDebugInfo,
  } = usePushNotifications();

  const {
    scheduleDaily,
    cancelAll: cancelStudyReminders,
    scheduledRemindersCount,
  } = useStudyReminders();
  const { celebrateStreak } = useStreakNotifications();

  const [debugInfo, setDebugInfo] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(false);

  /**
   * üîç Load debug info
   */
  const loadDebugInfo = async () => {
    try {
      setIsLoading(true);
      const info = await getDebugInfo();
      setDebugInfo(info);
      console.log('üîç Debug info loaded:', info);
    } catch (error) {
      console.error('‚ùå Error loading debug info:', error);
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * üì± Initialize notifications
   */
  const handleInitialize = async () => {
    try {
      setIsLoading(true);
      await initializeNotifications();
      await loadDebugInfo();
      Alert.alert('‚úÖ √öspƒõch', 'Push notifications inicializov√°ny!');
    } catch (error) {
      Alert.alert('‚ùå Chyba', `Nepoda≈ôilo se inicializovat: ${error}`);
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * üìù Request permissions
   */
  const handleRequestPermissions = async () => {
    try {
      setIsLoading(true);
      const granted = await requestPermissions();
      Alert.alert(
        granted ? '‚úÖ Povolen√≠ udƒõleno' : '‚ùå Povolen√≠ zam√≠tnuto',
        granted
          ? 'Push notifications jsou povoleny!'
          : 'U≈æivatel nepovolil notifikace'
      );
    } catch (error) {
      Alert.alert('‚ùå Chyba', `Nepoda≈ôilo se po≈æ√°dat o povolen√≠: ${error}`);
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * üìö Test study reminder
   */
  const handleTestStudyReminder = async () => {
    try {
      setIsLoading(true);
      const reminderTime = new Date(Date.now() + 5000); // 5 seconds
      const notificationId = await scheduleStudyReminder(
        'ƒåesk√Ω jazyk',
        'maturita',
        reminderTime
      );
      Alert.alert(
        '‚úÖ P≈ôipom√≠nka napl√°nov√°na',
        `ID: ${notificationId}\nZa 5 sekund`
      );
    } catch (error) {
      Alert.alert('‚ùå Chyba', `Nepoda≈ôilo se napl√°novat p≈ôipom√≠nku: ${error}`);
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * üî• Test streak motivation
   */
  const handleTestStreakMotivation = async () => {
    try {
      setIsLoading(true);
      const notificationId = await scheduleStreakMotivation(7);
      Alert.alert(
        '‚úÖ Streak motivace napl√°nov√°na',
        `ID: ${notificationId}\nZa 1 minutu`
      );
    } catch (error) {
      Alert.alert('‚ùå Chyba', `Nepoda≈ôilo se napl√°novat motivaci: ${error}`);
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * üéâ Test achievement notification
   */
  const handleTestAchievement = async () => {
    try {
      setIsLoading(true);
      await sendAchievement(
        'Prvn√≠ test! üéâ',
        '√öspƒõ≈°nƒõ jsi otestoval achievement notifikaci!'
      );
      Alert.alert(
        '‚úÖ Achievement odesl√°n',
        'Notifikace by se mƒõla zobrazit okam≈æitƒõ'
      );
    } catch (error) {
      Alert.alert('‚ùå Chyba', `Nepoda≈ôilo se odeslat achievement: ${error}`);
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * üìÖ Test daily reminder
   */
  const handleTestDailyReminder = async () => {
    try {
      setIsLoading(true);
      const reminderId = await scheduleDaily('Matematika', 'maturita', 19, 30);
      Alert.alert(
        '‚úÖ Denn√≠ p≈ôipom√≠nka',
        `Napl√°nov√°na na 19:30\nID: ${reminderId}`
      );
    } catch (error) {
      Alert.alert(
        '‚ùå Chyba',
        `Nepoda≈ôilo se napl√°novat denn√≠ p≈ôipom√≠nku: ${error}`
      );
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * üî• Test streak celebration
   */
  const handleTestStreakCelebration = async () => {
    try {
      setIsLoading(true);
      await celebrateStreak(7); // T√Ωden v kuse
      Alert.alert('‚úÖ Streak oslava', 'Oslava 7 dn√≠ v ≈ôadƒõ spu≈°tƒõna!');
    } catch (error) {
      Alert.alert('‚ùå Chyba', `Nepoda≈ôilo se oslavit streak: ${error}`);
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * üßπ Cancel all notifications
   */
  const handleCancelAll = async () => {
    try {
      setIsLoading(true);
      await cancelAllNotifications();
      await cancelStudyReminders();
      Alert.alert(
        '‚úÖ V≈°echny notifikace zru≈°eny',
        'Scheduled notifications smaz√°ny'
      );
    } catch (error) {
      Alert.alert('‚ùå Chyba', `Nepoda≈ôilo se zru≈°it notifikace: ${error}`);
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * üîÑ Refresh debug info on mount
   */
  useEffect(() => {
    loadDebugInfo();
  }, []);

  return (
    <ScrollView className="flex-1 bg-white p-4">
      <Text className="text-2xl font-bold text-gray-800 mb-6 text-center">
        üîî Push Notifications Test Panel
      </Text>

      {/* Status Section */}
      <View className="bg-gray-50 p-4 rounded-lg mb-6">
        <Text className="text-lg font-semibold text-gray-700 mb-3">
          üìä Status
        </Text>

        <View className="space-y-2">
          <Text className="text-sm">
            <Text className="font-medium">Inicializov√°no:</Text>{' '}
            {isInitialized ? '‚úÖ Ano' : '‚ùå Ne'}
          </Text>
          <Text className="text-sm">
            <Text className="font-medium">Povolen√≠:</Text>{' '}
            {hasPermission ? '‚úÖ Udƒõleno' : '‚ùå Neudƒõleno'}
          </Text>
          <Text className="text-sm">
            <Text className="font-medium">Push Token:</Text>{' '}
            {expoPushToken ? '‚úÖ Z√≠sk√°n' : '‚ùå Nedostupn√Ω'}
          </Text>
          {expoPushToken && (
            <Text className="text-xs text-gray-600 mt-2">
              Token: {expoPushToken.substring(0, 30)}...
            </Text>
          )}
          {error && (
            <Text className="text-sm text-red-600 mt-2">
              <Text className="font-medium">Chyba:</Text> {error}
            </Text>
          )}
        </View>
      </View>

      {/* Last Notification */}
      {lastNotification && (
        <View className="bg-green-50 p-4 rounded-lg mb-6 border border-green-200">
          <Text className="text-lg font-semibold text-green-700 mb-2">
            üì± Posledn√≠ notifikace
          </Text>
          <Text className="text-sm font-medium">
            {lastNotification.request.content.title}
          </Text>
          <Text className="text-sm text-gray-600">
            {lastNotification.request.content.body}
          </Text>
          <Text className="text-xs text-green-600 mt-2">
            {new Date(lastNotification.date).toLocaleString('cs-CZ')}
          </Text>
        </View>
      )}

      {/* Control Buttons */}
      <View className="space-y-3 mb-6">
        <Text className="text-lg font-semibold text-gray-700 mb-3">
          üéÆ Ovl√°d√°n√≠
        </Text>

        <Button
          title={isInitialized ? '‚úÖ Inicializov√°no' : 'üöÄ Inicializovat'}
          onPress={handleInitialize}
          disabled={isLoading || isInitialized}
          className="w-full"
        />

        <Button
          title={
            hasPermission ? '‚úÖ Povolen√≠ udƒõleno' : 'üìù Po≈æ√°dat o povolen√≠'
          }
          onPress={handleRequestPermissions}
          disabled={isLoading || hasPermission}
          className="w-full bg-blue-500"
        />
      </View>

      {/* Test Buttons */}
      {hasPermission && (
        <View className="space-y-3 mb-6">
          <Text className="text-lg font-semibold text-gray-700 mb-3">
            üß™ Testov√°n√≠
          </Text>

          <Button
            title="üìö Test Study Reminder (5s)"
            onPress={handleTestStudyReminder}
            disabled={isLoading}
            className="w-full bg-purple-500"
          />

          <Button
            title="üî• Test Streak Motivation (1m)"
            onPress={handleTestStreakMotivation}
            disabled={isLoading}
            className="w-full bg-orange-500"
          />

          <Button
            title="üéâ Test Achievement (okam≈æitƒõ)"
            onPress={handleTestAchievement}
            disabled={isLoading}
            className="w-full bg-yellow-500"
          />

          <Button
            title="üìÖ Test Daily Reminder (19:30)"
            onPress={handleTestDailyReminder}
            disabled={isLoading}
            className="w-full bg-indigo-500"
          />

          <Button
            title="üî• Test Streak Celebration"
            onPress={handleTestStreakCelebration}
            disabled={isLoading}
            className="w-full bg-pink-500"
          />

          <Button
            title="üóëÔ∏è Zru≈°it v≈°echny notifikace"
            onPress={handleCancelAll}
            disabled={isLoading}
            className="w-full bg-red-500"
          />
        </View>
      )}

      {/* Debug Info */}
      <View className="bg-gray-50 p-4 rounded-lg mb-6">
        <View className="flex-row justify-between items-center mb-3">
          <Text className="text-lg font-semibold text-gray-700">
            üîç Debug Info
          </Text>
          <Button
            title="Refresh"
            onPress={loadDebugInfo}
            disabled={isLoading}
            className="px-3 py-1 bg-gray-500"
            size="sm"
          />
        </View>

        {debugInfo && (
          <View className="space-y-1">
            <Text className="text-xs">Platform: {debugInfo.platform}</Text>
            <Text className="text-xs">
              Device: {debugInfo.isDevice ? 'Physical' : 'Simulator'}
            </Text>
            <Text className="text-xs">OS: {debugInfo.osVersion}</Text>
            <Text className="text-xs">App: {debugInfo.appVersion}</Text>
            <Text className="text-xs">
              Permissions: {debugInfo.permissions}
            </Text>
            <Text className="text-xs">
              Scheduled: {debugInfo.scheduledNotificationsCount}
            </Text>
            <Text className="text-xs">
              Study Reminders: {scheduledRemindersCount}
            </Text>
            {debugInfo.expoPushToken && (
              <Text className="text-xs">
                Token: {debugInfo.expoPushToken.substring(0, 20)}...
              </Text>
            )}
          </View>
        )}
      </View>

      {/* Instructions */}
      <View className="bg-blue-50 p-4 rounded-lg border border-blue-200">
        <Text className="text-lg font-semibold text-blue-700 mb-2">
          üìã Instrukce
        </Text>
        <Text className="text-sm text-blue-600 leading-5">
          1. Nejd≈ô√≠ve inicializuj push notifications{'\n'}
          2. Po≈æ√°dej o povolen√≠ (na iOS se zobraz√≠ dialog){'\n'}
          3. Testuj r≈Øzn√© typy notifikac√≠{'\n'}
          4. Zkontroluj debug info pro detaily{'\n'}
          5. Na simul√°toru nebudou notifikace fungovat{'\n'}
          6. Pot≈ôebuje≈° fyzick√© za≈ô√≠zen√≠ pro pln√© testov√°n√≠
        </Text>
      </View>
    </ScrollView>
  );
}
