# 🚀 Universal Mobile App Manual Deployment Workflow
# Template for manual deployments - OTA updates and store submissions

name: 🚀 Manual Deploy

# Manual trigger only
on:
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Type of deployment'
        required: true
        default: 'ota'
        type: choice
        options:
          - ota
          - store
          - release
      platform:
        description: 'Platform (for store deployment)'
        required: false
        default: 'both'
        type: choice
        options:
          - ios
          - android
          - both
      branch:
        description: 'Branch for OTA update'
        required: false
        default: 'main'
        type: string
      message:
        description: 'Update message'
        required: false
        default: 'Manual deployment'
        type: string
      version_bump:
        description: 'Version bump type (for release)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  pre-deploy-check:
    name: 🔍 Pre-deployment Check
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📱 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🏗️ Setup EAS
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run quality checks
        run: |
          npm run lint
          npx tsc --noEmit

      - name: ✅ Deployment readiness check
        run: |
          echo "✅ Quality checks passed"
          echo "Deployment type: ${{ github.event.inputs.deployment_type }}"

  ota-update:
    name: 📱 OTA Update
    runs-on: ubuntu-latest
    needs: pre-deploy-check
    if: github.event.inputs.deployment_type == 'ota'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📱 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🏗️ Setup EAS
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🚀 Publish OTA Update
        run: |
          BRANCH="${{ github.event.inputs.branch || 'main' }}"
          MESSAGE="${{ github.event.inputs.message || 'Manual OTA update' }}"

          echo "Publishing OTA update to branch: $BRANCH"
          echo "Message: $MESSAGE"

          eas update --branch "$BRANCH" --message "$MESSAGE"

      - name: ✅ OTA Update Success
        run: |
          echo "✅ OTA update published successfully!"
          echo "Branch: ${{ github.event.inputs.branch || 'main' }}"

  store-submission:
    name: 🏪 Store Submission
    runs-on: ubuntu-latest
    needs: pre-deploy-check
    if: github.event.inputs.deployment_type == 'store'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📱 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🏗️ Setup EAS
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏪 Submit to Stores
        run: |
          PLATFORM="${{ github.event.inputs.platform || 'both' }}"

          echo "Submitting to stores for platform: $PLATFORM"

          case "$PLATFORM" in
            "ios")
              eas submit --platform ios --non-interactive
              ;;
            "android")
              eas submit --platform android --non-interactive
              ;;
            "both")
              eas submit --platform all --non-interactive
              ;;
          esac

      - name: ✅ Store Submission Success
        run: |
          echo "✅ Store submission completed!"
          echo "Platform: ${{ github.event.inputs.platform || 'both' }}"

  complete-release:
    name: 🎯 Complete Release
    runs-on: ubuntu-latest
    needs: pre-deploy-check
    if: github.event.inputs.deployment_type == 'release'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📱 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🏗️ Setup EAS
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: 📦 Install dependencies
        run: npm ci

      - name: ⬆️ Bump Version
        run: |
          VERSION_TYPE="${{ github.event.inputs.version_bump || 'patch' }}"

          echo "Bumping version: $VERSION_TYPE"

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          npm version "$VERSION_TYPE" --no-git-tag-version

          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

          # Update app.json if jq is available
          if command -v jq &> /dev/null; then
            jq --arg version "$NEW_VERSION" '.expo.version = $version' app.json > tmp.json && mv tmp.json app.json
          fi

          git add package.json app.json
          git commit -m "chore: bump version to $NEW_VERSION"
          git tag -a "v$NEW_VERSION" -m "Release $NEW_VERSION"

      - name: 🚀 Push Changes
        run: |
          git push origin main
          git push origin "v$NEW_VERSION"

      - name: 🎉 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          body: |
            ## 🎉 Universal Mobile App v${{ env.NEW_VERSION }}

            Automatic release created via GitHub Actions.

            ### 📱 Features
            - React Native universal app template
            - Modern mobile architecture
            - Toast notifications system
            - Loading skeletons
            - Sentry error tracking
            - PostHog analytics

            ### 🚀 Download
            Build artifacts will be available after EAS build completion.
          draft: false
          prerelease: false

  notify-completion:
    name: 📢 Notify Completion
    runs-on: ubuntu-latest
    needs: [ota-update, store-submission, complete-release]
    if: always()

    steps:
      - name: 📢 Deployment Success
        if: |
          (needs.ota-update.result == 'success' && github.event.inputs.deployment_type == 'ota') ||
          (needs.store-submission.result == 'success' && github.event.inputs.deployment_type == 'store') ||
          (needs.complete-release.result == 'success' && github.event.inputs.deployment_type == 'release')
        run: |
          echo "✅ Deployment completed successfully!"
          echo "Type: ${{ github.event.inputs.deployment_type }}"

      - name: ❌ Deployment Failed
        if: |
          (needs.ota-update.result == 'failure' && github.event.inputs.deployment_type == 'ota') ||
          (needs.store-submission.result == 'failure' && github.event.inputs.deployment_type == 'store') ||
          (needs.complete-release.result == 'failure' && github.event.inputs.deployment_type == 'release')
        run: |
          echo "❌ Deployment failed!"
          echo "Type: ${{ github.event.inputs.deployment_type }}"

# Extension notes:
# 1. Add Slack/Discord notifications for deployment status
# 2. Add rollback functionality for OTA updates
# 3. Add automatic release notes generation
# 4. Add integration with App Store Connect API
# 5. Add staging environment deployment
